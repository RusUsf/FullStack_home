--Git command to create new branch and switch to it 
git checkout -b <name-of-new-branch>
git branch

--Updating Node js
node -v
npm install -g n
n latest

--Upgrading Angular CLI
ng v
npm uninstall -g @angular/cli
npm install -g @angular/cli@latest

--Installing Angular Compiler CLI
npm install -g @angular/compiler-cli

--Project Setup
ng new <name-of-the-project>

--Creating Service
ng g s <name-of-the-service>

--Serving the web app
ng serve



--Steps to consume Back-End API

--Step 1 - Create a Service to Consume Web API (Ex: data-runner)
ng g s <servce-name>

--Step 2 - Crete a component to display values (Ex: values)
ng g c <component-name>

--NOTE: next are the actual code examples of Angular parts

app.module.ts:

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http'; // Import HttpClientModule
import { FormsModule } from '@angular/forms'; // Import FormsModule for ngModel

import { AppComponent } from './app.component';
import { ValuesComponent } from './values/values.component'; // Import your component
import { DataService } from './data.service'; // Import your service

@NgModule({
  declarations: [
    AppComponent,
    ValuesComponent // Declare your component
  ],
  imports: [
    BrowserModule,
    HttpClientModule, // Add HttpClientModule to imports
    FormsModule // Add FormsModule to imports for ngModel
  ],
  providers: [DataService], // Add your service to providers
  bootstrap: [AppComponent]
})
export class AppModule { }


data.service.ts:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
11:05 PM 6/15/2023})
export class DataService {
  apiUrl = 'https://localhost:5001/values'; // Your API URL

  constructor(private http: HttpClient) { }

  // Method to get all values
  getValues(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  // Method to get a single value by ID
  getValue(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/${id}`);
  }
}


values.component.ts

import { Component, OnInit } from '@angular/core';
import { DataService } from '../data.service';

@Component({
  selector: 'app-values',
  templateUrl: './values.component.html',
  styleUrls: ['./values.component.css']
})
export class ValuesComponent implements OnInit {
  values: any[] = []; // Array to hold all values
  searchTerm: number; // Search term for the search form
  searchedValue: any; // Value found by the search

  constructor(private dataService: DataService) { }

  ngOnInit(): void {
    // Get all values on initialization
    this.dataService.getValues().subscribe(values => {
      this.values = values;
    });
  }

  // Method to perform the search
  search(): void {
    this.dataService.getValue(this.searchTerm).subscribe(value => {
      this.searchedValue = value;
    });
  }
}

values.component.html:

<!-- Search form -->
<form (submit)="search()">
  <input [(ngModel)]="searchTerm" name="searchTerm" placeholder="Enter ID" required>
  <button type="submit">Search</button>
</form>

<!-- Table to display all values -->
<table>
  <tr>
    <th>ID</th>
    <th>Tip</th>
  </tr>
  <tr *ngFor="let value of values">
    <td>{{ value.id }}</td>
    <td>{{ value.tip }}</td>
  </tr>
</table>

<!-- Display the searched value -->
<h2>Searched Value</h2>
<p *ngIf="searchedValue">ID: {{ searchedValue.id }}, Tip: {{ searchedValue.tip }}</p>

